# Boston Housing project
import streamlit as st
import pandas as pd
import shap
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.ensemble import RandomForestRegressor


### Web page title + supporting lines
st.header("California Housing Price Prediction App")
st.markdown("""
This is a simple web-based application where users can predict house prices in California.  

There are a number of features that can be manually entered in the side panel which may affect the prediction generated by the app.   

Additionally, graphs will be produced to display the feature importance within the model.  

Resources Used:
* **Python**            
""")
st.write('---')


# load the data for prediction
housing = fetch_california_housing()
# target is MedHouseval = the median value of house price
X = pd.DataFrame(housing.data)
X = X.rename(columns={0:'MedInc',
                 1: 'HouseAge',
                 2: 'AveRooms',
                 3: 'AveBedrms',
                 4: 'Population',
                 5: 'AveOccup',
                 6: 'Latitude',
                 7: 'Longitude'})

Y = pd.DataFrame(housing.target)
Y = Y.rename(columns = {0: 'MedHouseVal'})



#### Side Panel
# side panel for feature input
st.sidebar.header('Input Features')

# define the sliders in side panel
def user_input():
    # create the sliders for users
    MedInc = st.sidebar.slider('Median Income', X.MedInc.min(), X.MedInc.max(), X.MedInc.mean())
    HouseAge = st.sidebar.slider('House Age', X.HouseAge.min(), X.HouseAge.max(), X.HouseAge.mean())
    AveRooms = st.sidebar.slider("Average Number of Rooms", X.AveRooms.min(), X.AveRooms.max(), X.AveRooms.mean())
    AveBedrms = st.sidebar.slider("Average Number of Bedrooms", X.AveBedrms.min(), X.AveBedrms.max(), X.AveBedrms.mean())
    Pop = st.sidebar.slider("Population", X.Population.min(), X.Population.max(), X.Population.mean())
    Household = st.sidebar.slider("Average Number of Household Members", X.AveOccup.min(), X.AveOccup.max(), X.AveOccup.mean())
    Lat = st.sidebar.slider("Latitude", X.Latitude.min(), X.Latitude.max(), X.Latitude.mean())
    Lon = st.sidebar.slider("Longitude", X.Longitude.min(), X.Longitude.max(), X.Longitude.mean())
    
    # create a dictionary of all the values selected by the slider
    inputs = {'MedInc': MedInc,
              'HouseAge': HouseAge,
              'AveRooms': AveRooms,
              'AveBedrms': AveBedrms,
              'Population': Pop,
              'AveOccup': Household,
              'Latitude': Lat,
              'Longitude': Lon}

    # convert dictionary to dataframe and return
    features = pd.DataFrame(inputs, index=[0])
    return features

# creates the data frame of our input features
df = user_input()




#### Main Panel
st.header("Features Selected")
st.write(df) # print the features to the page
st.write('---')





# create the regression model
model = RandomForestRegressor()
model.fit(X, Y)

# create the prediction from the training data
prediction = model.predict(df)

# print outputs of the prediction model
st.markdown("""
### Prediction for Median House Value based on the input features            
""")
st.write(prediction)
st.write('---')



## feature importance explainer
st.header("Feature Importance")

# create the explainers and shap values
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X)

# plot
plt.title("Feature importance according to SHAP")
shap.summary_plot(shap_values, X)
st.pyplot(bbox_inches='tight')
st.write('---')

